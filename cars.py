# Scenario
# You work for a company that sells second hand cars.
# Management wants to get a summary of the amounts of vehicles that have been sold at the end of every month.
# The company already has a web service which serves sales data at the end of every month,
# but management wants an email to be sent out with an attached PDF so that data is more easily readable.

# What I've done?
# Import some external libraries __ (1)
# Complete process_data function, so it retrieved cars with maximum total sales and year with maximum total sales __ (2)
# Define cars_dict_to_table_by_total_sales function, so it retrieved a sorted list of cars by total sales __ (3)
# Define generate_optional function, so it retrieved PDF file with table and pie chart consist of 10 most sales cars __ (4)
# Send those PDF files to the emails with their own criteria __ (5)

#!/usr/bin/env python3

# (1)
import json
import locale
import sys
import os
import reports
import emails
from operator import itemgetter
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.piecharts import Pie

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data

def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  sum_car_year = {}
  max_car_year = []
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # (2)
    # TODO: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item
    # TODO: also handle most popular car_year
    if item["car"]["car_year"] not in sum_car_year.keys():
      sum_car_year[item["car"]["car_year"]] = [1, item["total_sales"]]
    else:
      sum_car_year[item["car"]["car_year"]][0] += 1
      sum_car_year[item["car"]["car_year"]][1] += item["total_sales"]
  for year, value in sum_car_year.items():
    if len(max_car_year) == 0:
      max_car_year = [year] + sum_car_year[year]
    else:
      if sum_car_year[year][0] > max_car_year[1]:
        max_car_year = [year] + sum_car_year[year]

  summary = [
    "The {} generated the most revenue: ${}".format(
        format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
        format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year was {} with {} sales.".format(
        max_car_year[0], max_car_year[2]),
  ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

# (3)
def cars_dict_to_table_by_total_sales(car_data):
  """Turns the data in car_data into a list of lists sorted by its total sales"""
  table_data = []
  for item in data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  table_data = sorted(table_data, key = itemgetter(3), reverse = True)
  return table_data

# (4)
def generate_optional(filename, title, additional_info, table_data):
  from reportlab.platypus import SimpleDocTemplate
  from reportlab.platypus import Paragraph, Spacer, Table, Image
  from reportlab.lib.styles import getSampleStyleSheet
  from reportlab.lib import colors

  styles = getSampleStyleSheet()
  report = SimpleDocTemplate(filename)
  report_title = Paragraph(title, styles["h1"])
  report_info = Paragraph(additional_info, styles["BodyText"])

  report_pie = Pie(width = 1000, height = 1000)
  report_pie.data = []
  report_pie.labels = []
  for item in table_data[:10]:
    report_pie.data.append(item[3])
    report_pie.labels.append(item[1])
  report_pie.sideLabels = True
  report_chart = Drawing()
  report_chart.add(report_pie)

  table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                 ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                 ('ALIGN', (0,0), (-1,-1), 'CENTER')]
  table_data.insert(0, ["ID", "Car", "Price", "Total Sales"])
  report_table = Table(data=table_data[:11], style=table_style, hAlign="LEFT")

  empty_line = Spacer(1,20)

  report.build([report_title, empty_line, report_info, empty_line, report_table, report_chart])

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  table_data = cars_dict_to_table(data)
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", "{} <br/>{} <br/>{}".format(summary[0], summary[1], summary[2]), table_data)

  # (5)
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "{} \n{} \n{}".format(summary[0], summary[1], summary[2])
  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

  # Optional challenge
  table_data = []
  for item in data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  table_data = sorted(table_data, key = itemgetter(3), reverse = True)

  # (5)
  generate_optional("/tmp/cars_optional.pdf", "An Extra Report of Car Sales", "Table sorted by total sales and a pie chart created.", table_data)

  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Optional Challenge"
  body = "Table sorted by total sales and a pie chart created."
  message = emails.generate(sender, receiver, subject, body, "/tmp/cars_optional.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
